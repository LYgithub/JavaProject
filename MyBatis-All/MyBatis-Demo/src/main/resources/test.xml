<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">


    <context:component-scan base-package="com.yang" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Component"/>
    </context:component-scan>


    <!-- 配置组件包扫描的位置 -->
    <context:component-scan base-package="com.yang" />

    <!-- 读取db.properties配置文件到Spring容器中 -->
    <context:property-placeholder
            location="classpath:db.properties" />
    <!-- 配置 阿里巴巴的 druid 数据源（连接池） -->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- SpringEL 语法 ${key} -->
        <property name="driverClassName"
                  value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />

        <!-- ${username}如果key是username，name 默认spring框架调用的当前操作系统的账号 解决方案：可以统一给key加一个前缀 -->

        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="${jdbc.maxActive}" />

    </bean>


    <!-- 创建SqlSessionFactory MyBatis会话工厂对象 -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 读取映射文件 ,MyBatis的纯注解不用配置 -->
        <property name="mapperLocations">
            <array>
                <!-- 配置单个映射文件 -->
                <!-- <value>classpath:cn/zj/ssm/mapper/UserMapper.xml</value> -->
                <!-- 配置多个映射文件使用 * 通配符 -->
                <value>classpath:cn/sxt/mapper/*Mapper.xml</value>
            </array>

        </property>

        <!-- 配置mybatis-confg.xml主配置文件（注配置文件可以保留一些个性化配置，缓存，日志，插件） -->
        <property name="configLocation"
                  value="classpath:mybatis-config.xml" />
        <!-- 配置别名，使用包扫描 -->
        <property name="typeAliasesPackage" value="cn.sxt.pojo"></property>
    </bean>


    <!-- SqlSession 不用单独创建，每次做crud操作都需要Mapper接口的代理对象
            而代理对象的创建又必须有 SqlSession对象创建

        Spring在通过MyBatis创建 Mapper接口代理对象的时候，底层自动把SqlSession会话对象创建出来 -->

    <!-- 创建UserMapper接口的代理对象,创建单个代理对象 参考桥梁包：org.mybatis.spring.mapper.MapperFactoryBean<T>
        此类就是创建 Mapper 代理对象的类 -->
    <!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        注入UserMapper接口 <property name="mapperInterface" value="cn.sxt.mapper.UserMapper"/>
        注入sqlSessionFactory工厂对象 <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
        </bean> -->
    <!-- 使用包扫描创建代理对象，包下面所有Mapper接口统一创建代理对象 使用桥梁包下面 ： org.mybatis.spring.mapper.MapperScannerConfigurer
        可以包扫描创建所有映射接口的代理对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 配置SqlSessionFactoryBean的名称 -->
        <property name="basePackage" value="cn.sxt.mapper"/>
        <!-- 可选，如果不写，Spring启动时候。容器中。自动会按照类型去把SqlSessionFactory对象注入进来 -->
        <!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->

        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

    </bean>
    <!--  1.配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据源 -->

        <property name="dataSource" ref="dataSource"></property>

    </bean>
    <!--
        2.配置事务的细节
        配置事务通知/增强
     -->
    <tx:advice id="tx" transaction-manager="transactionManager" >

        <!-- 配置属性 -->
        <tx:attributes>
            <!-- DQL  -->
            <tx:method name="select*" read-only="true" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="5"/>
            <tx:method name="query*" read-only="true" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="5"/>
            <tx:method name="get*" read-only="true" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="5"/>
            <tx:method name="find*" read-only="true" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="5"/>
            <!-- 其他 -->
            <tx:method name="*" read-only="false" isolation="REPEATABLE_READ" propagation="REQUIRED" timeout="5"/>
        </tx:attributes>
    </tx:advice>

    <!--
            3.使用AOP将事务切到Service层
        -->
    <aop:config>
        <!-- 配置切入点 -->
        <aop:pointcut expression="execution(* cn.zj.ssm.service..*.*(..))" id="pt"/>
        <!-- 配置切面= 切入点+通知 -->
        <aop:advisor advice-ref="tx" pointcut-ref="pt"/>
    </aop:config>



</beans>